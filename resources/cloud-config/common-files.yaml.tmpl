  - path: /opt/bin/s3sync.sh
    permissions: 0700
    owner: root
    content: |
        #!/bin/bash
        # This script run a awscli docker to sync /var/lib/apps with s3 bucket
        # this allows us to dynamically config hosted applications
        AWS_CONFIG_ENV=/root/.aws/envvars
        source $AWS_CONFIG_ENV
        IMAGE=suet/awscli:latest
        APPBUCKET=s3://${AWS_ACCOUNT}-${CLUSTER_NAME}-config/apps
        DST=/var/lib/apps
        CMD="aws s3 sync --exact-timestamps --delete $APPBUCKET $DST && chmod 755 $DST/bin/*"
        
        # pull the IMAGE if not loaded
        docker history $IMAGE > /dev/null 2>&1 || docker pull $IMAGE
        # sync s3 apps to
        docker run --rm --name s3sync -v $DST:$DST --env-file=$AWS_CONFIG_ENV $IMAGE /bin/bash -c "$CMD"
  - path: /opt/bin/post-provision.sh
    permissions: 0700
    owner: root
    content: |
        #!/usr/bin/bash
        # This script gets excecuted on each reboot. 
        # It can be an additional config you want to set after CoreOS's cloud-config.
        post_provision='/var/lib/apps/post_provision'
        # wait until the post_provision is downloaded from git/s3
        until [ -d $post_provision ]; do sleep 3; done;
        if [ -d $post_provision ]
        then
            for i in $post_provision/*.sh
            do
              /bin/bash -x $i
            done
        fi
        exit 0
  - path: /etc/aws/account.envvars
    permissions: 0644
    owner: root
    content: |
        AWS_ACCOUNT=${AWS_ACCOUNT}
        AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
        CLUSTER_NAME=${CLUSTER_NAME}
  - path: /root/.aws/envvars
    permissions: 0600
    owner: root
    content: |
        AWS_ACCOUNT=${AWS_ACCOUNT}
        AWS_USER=${AWS_USER}
        AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
        AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
        AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
  - path: /root/.aws/config
    permissions: 0600
    owner: root
    content: |
        [default]
        aws_access_key_id=${AWS_ACCESS_KEY_ID}
        aws_secret_access_key=${AWS_SECRET_ACCESS_KEY}
        region=${AWS_DEFAULT_REGION}


